// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  skills String?
  location String?
  experience String?
}

model Job{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  title String
  description String?
  short_description String?
  imageUrl String?
  isPublished Boolean @default(false)
  tags String[]
  savedUsers String[]
  shiftTiming String?
  hourlyRate String?
  yearsOfExperience String?
  workMode String?
  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId], references: [id])
  companyId String? @db.ObjectId
  company Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Company{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  name String
  description String?
  logo String?
  coverImage String?
  mail String?
  website String?
  linkedin String?
  address_line_1 String?
  address_line_2 String?
  city String?
  state String?
  zipcode String?
  jobs Job[]
  followers String[]
  overview String?
  whyJoinUs String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile{
  userId String @id @map("_id")
  fullName String?
  email String?
  contact String?
  appliedJobs AppliedJobs[]
  // resumes Resumes[]
  // activeResumeId String?
  experience String?
  skills String?
}

type AppliedJobs{
  jobId String
  appliedAt DateTime @default(now())
}

// model Resumes{
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   name String
//   url String
//   userProfileId String
//   userProfile UserProfile @relation(fields :[userProfileId], references: [userId], onDelete : Cascade)
//    createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
//   @@index([userProfileId], name : "idx_userProfileId")
// }

model Assessment {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String   
  hobbies                   String[]
  interests                 String[]
  strengths                 String[]
  areasForImprovement       String[]
  currentRole               String
  careerGoals               String
  preferredLocation         String
  preferredIndustry         String
  skillAndQualifications    String[]
  workExperience            String
  createdAt                 DateTime @default(now())
  // CareerSuggestion          CareerSuggestion[]
}


// model CareerSuggestion {
//   id            String     @id @default(auto()) @map("_id") @db.ObjectId
//   userId        String
//   suggestions   String
//   assessmentId  String     @db.ObjectId
//   createdAt     DateTime   @default(now())
//   assessment    Assessment @relation(fields: [assessmentId], references: [id])
// }